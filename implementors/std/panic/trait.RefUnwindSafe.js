(function() {var implementors = {};
implementors["ansi_term"] = [{"text":"impl RefUnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colour","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrintFmt","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !RefUnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceSymbol","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl RefUnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseMonthError","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl RefUnwindSafe for AppSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["exitfailure"] = [{"text":"impl !RefUnwindSafe for ExitFailure","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ExitDisplay&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !RefUnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl RefUnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; RefUnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl RefUnwindSafe for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl RefUnwindSafe for MimeGuess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IterRaw","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl RefUnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Fds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VsockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindToDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpGsoSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpGroSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, C&gt; RefUnwindSafe for SendMmsgData&lt;'a, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; RefUnwindSafe for RecvMmsgData&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerSetTimeFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expiration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysconfVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for User","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;E&gt; RefUnwindSafe for ErrorKind&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Needed","synthetic":true,"types":[]},{"text":"impl&lt;I, O, E&gt; RefUnwindSafe for IResult&lt;I, O, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endianness","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Input&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, E, M&gt; RefUnwindSafe for ConsumerState&lt;O, E, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ProducerRepeat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'x&gt; RefUnwindSafe for MemProducer&lt;'x&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileProducerState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileProducer","synthetic":true,"types":[]},{"text":"impl&lt;'a, C, R, S, T, E, M, F&gt; RefUnwindSafe for MapConsumer&lt;'a, C, R, S, T, E, M, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, C1, C2, R, S, T, E, M&gt; RefUnwindSafe for ChainConsumer&lt;'a, 'b, C1, C2, R, S, T, E, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;RefUnwindSafe + UnwindSafe&gt; RefUnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["os_pipe"] = [{"text":"impl RefUnwindSafe for PipeReader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PipeWriter","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]}];
implementors["petgraph"] = [{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for DfsEvent&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Control&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; RefUnwindSafe for Dfs&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; RefUnwindSafe for DfsPostOrder&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; RefUnwindSafe for Bfs&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; RefUnwindSafe for Topo&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, C&gt; RefUnwindSafe for WalkerIter&lt;W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, F&gt; RefUnwindSafe for NodeFiltered&lt;G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for NodeFilteredNeighbors&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for NodeFilteredNodes&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I, F&gt; RefUnwindSafe for NodeFilteredEdgeReferences&lt;'a, G, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I, F&gt; RefUnwindSafe for NodeFilteredEdges&lt;'a, G, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, F&gt; RefUnwindSafe for EdgeFiltered&lt;G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, F&gt; RefUnwindSafe for EdgeFilteredNeighbors&lt;'a, G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as IntoEdges&gt;::Edges: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I, F&gt; RefUnwindSafe for EdgeFilteredEdges&lt;'a, G, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, F&gt; RefUnwindSafe for EdgeFilteredNeighborsDirected&lt;'a, G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as IntoEdgesDirected&gt;::EdgesDirected: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as GraphBase&gt;::NodeId: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; RefUnwindSafe for Reversed&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ReversedEdges&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReversedEdgeReference&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ReversedEdgeReferences&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E&gt; RefUnwindSafe for Element&lt;N, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FilterElements&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Dominators&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; RefUnwindSafe for DominatorsIter&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; RefUnwindSafe for DfsSpace&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; RefUnwindSafe for MinSpanningTree&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as Data&gt;::EdgeWeight: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as GraphBase&gt;::NodeId: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as IntoNodeReferences&gt;::NodeReferences: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Cycle&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NegativeCycle","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty, Ix&gt; RefUnwindSafe for Csr&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EdgesNotSorted","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; RefUnwindSafe for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; RefUnwindSafe for EdgeReference&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; RefUnwindSafe for EdgeReferences&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Ix&gt; RefUnwindSafe for Neighbors&lt;'a, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; RefUnwindSafe for NodeIdentifiers&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G&gt; !RefUnwindSafe for Dot&lt;'a, G&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty, Ix&gt; RefUnwindSafe for StableGraph&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ix&gt; RefUnwindSafe for NodeReferences&lt;'a, N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; RefUnwindSafe for EdgeReference&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; RefUnwindSafe for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; RefUnwindSafe for EdgeReferences&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty, Ix&gt; RefUnwindSafe for Externals&lt;'a, N, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; RefUnwindSafe for Neighbors&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; RefUnwindSafe for WalkNeighbors&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ix&gt; RefUnwindSafe for NodeIndices&lt;'a, N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; RefUnwindSafe for EdgeIndices&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; RefUnwindSafe for NodeIndex&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; RefUnwindSafe for EdgeIndex&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, Ix&gt; RefUnwindSafe for Node&lt;N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, Ix&gt; RefUnwindSafe for Edge&lt;E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty, Ix&gt; RefUnwindSafe for Graph&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty, Ix&gt; RefUnwindSafe for Externals&lt;'a, N, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; RefUnwindSafe for Neighbors&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; RefUnwindSafe for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; RefUnwindSafe for EdgesConnecting&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ix&gt; RefUnwindSafe for NodeWeightsMut&lt;'a, N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; RefUnwindSafe for EdgeWeightsMut&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; RefUnwindSafe for WalkNeighbors&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; RefUnwindSafe for NodeIndices&lt;Ix&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; RefUnwindSafe for EdgeIndices&lt;Ix&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; RefUnwindSafe for EdgeReference&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ix&gt; RefUnwindSafe for NodeReferences&lt;'a, N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; RefUnwindSafe for EdgeReferences&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G&gt; RefUnwindSafe for Frozen&lt;'a, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty&gt; RefUnwindSafe for GraphMap&lt;N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; RefUnwindSafe for Nodes&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty&gt; RefUnwindSafe for Neighbors&lt;'a, N, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty&gt; RefUnwindSafe for NeighborsDirected&lt;'a, N, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; RefUnwindSafe for Edges&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; RefUnwindSafe for AllEdges&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; RefUnwindSafe for AllEdgesMut&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'b, T&gt; RefUnwindSafe for Ptr&lt;'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; RefUnwindSafe for NodeIdentifiers&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; RefUnwindSafe for NodeReferences&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NotZero&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty, Null, Ix&gt; RefUnwindSafe for MatrixGraph&lt;N, E, Ty, Null, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Null: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Ix&gt; RefUnwindSafe for NodeIdentifiers&lt;'a, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ix&gt; RefUnwindSafe for NodeReferences&lt;'a, N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Ty, Null, Ix&gt; RefUnwindSafe for EdgeReferences&lt;'a, Ty, Null, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Null: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Ty, Null, Ix&gt; RefUnwindSafe for Neighbors&lt;'a, Ty, Null, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Null: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Ty, Null, Ix&gt; RefUnwindSafe for Edges&lt;'a, Ty, Null, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Null: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; RefUnwindSafe for UnionFind&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Direction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Directed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Undirected","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanRange","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformChar","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["stderrlog"] = [{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for StdErrLog","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl RefUnwindSafe for StrSimError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl RefUnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindStyle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl RefUnwindSafe for TempDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathPersistError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TempPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamedTempFile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PersistError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl RefUnwindSafe for ColorChoice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseColorError","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl RefUnwindSafe for NoHyphenation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; RefUnwindSafe for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ThreadLocal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tree_magic"] = [{"text":"impl RefUnwindSafe for Cache","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TYPE","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; RefUnwindSafe for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl RefUnwindSafe for Void","synthetic":true,"types":[]}];
implementors["wayland_client"] = [{"text":"impl RefUnwindSafe for ConnectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtocolError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Display","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventQueue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QueueToken","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadEventsGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobalManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalEvent","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Proxy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Attached&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Main&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProxyMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlDisplay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlRegistry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlCallback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlCompositor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlShmPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlShm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlDataOffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlDataSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlDataDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DndAction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlDataDeviceManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlShell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Resize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FullscreenMethod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlShellSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlSeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AxisSource","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlPointer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeymapFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlKeyboard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlTouch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Subpixel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlSubcompositor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlSubsurface","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AnonymousObject","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Argument","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RawEvent","synthetic":true,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for DispatchData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for Filter&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; RefUnwindSafe for Object&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; RefUnwindSafe for ObjectMap&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedSocket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UserData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserDataMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgumentType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Argument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageWriteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoMessage","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ThreadGuard&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresentMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpFullscreenShellV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpFullscreenShellModeFeedbackV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresentMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpFullscreenShellV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpFullscreenShellModeFeedbackV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpIdleInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpIdleInhibitorV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpIdleInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpIdleInhibitorV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputMethodContextV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputMethodV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputPanelV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputPanelSurfaceV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputMethodContextV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputMethodV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputPanelV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputPanelSurfaceV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputTimestampsManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputTimestampsV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputTimestampsManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpInputTimestampsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpKeyboardShortcutsInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpKeyboardShortcutsInhibitorV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpKeyboardShortcutsInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpKeyboardShortcutsInhibitorV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxDmabufV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxBufferParamsV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxDmabufV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxBufferParamsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxExplicitSynchronizationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxSurfaceSynchronizationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxBufferReleaseV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxExplicitSynchronizationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxSurfaceSynchronizationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLinuxBufferReleaseV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPointerConstraintsV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLockedPointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpConfinedPointerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPointerConstraintsV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpLockedPointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpConfinedPointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPointerGesturesV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPointerGestureSwipeV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPointerGesturePinchV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPointerGesturesV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPointerGestureSwipeV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPointerGesturePinchV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPrimarySelectionDeviceManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPrimarySelectionDeviceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPrimarySelectionOfferV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPrimarySelectionSourceV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPrimarySelectionDeviceManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPrimarySelectionDeviceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPrimarySelectionOfferV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpPrimarySelectionSourceV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpRelativePointerManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpRelativePointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpRelativePointerManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpRelativePointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletSeatV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletToolV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletSeatV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletToolV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletManagerV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletSeatV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletToolV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletPadRingV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletPadStripV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletPadGroupV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletPadV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletManagerV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletSeatV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletToolV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletPadRingV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletPadStripV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletPadGroupV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTabletPadV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreeditStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextDirection","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTextInputV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTextInputManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreeditStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextDirection","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTextInputV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTextInputManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeCause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTextInputV3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTextInputManagerV3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeCause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTextInputV3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpTextInputManagerV3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgDecorationManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgToplevelDecorationV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgDecorationManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgToplevelDecorationV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgExporterV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgImporterV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgExportedV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgImportedV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgExporterV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgImporterV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgExportedV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgImportedV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgExporterV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgImporterV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgExportedV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgImportedV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgExporterV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgImporterV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgExportedV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgImportedV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgOutputManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgOutputV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgOutputManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgOutputV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgShell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgShell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgShellV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgPositionerV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgSurfaceV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgToplevelV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgPopupV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgShellV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgPositionerV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgSurfaceV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgToplevelV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZxdgPopupV6","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpXwaylandKeyboardGrabManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpXwaylandKeyboardGrabV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpXwaylandKeyboardGrabManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwpXwaylandKeyboardGrabV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GtkPrimarySelectionDeviceManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GtkPrimarySelectionDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GtkPrimarySelectionOffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GtkPrimarySelectionSource","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GtkPrimarySelectionDeviceManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GtkPrimarySelectionDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GtkPrimarySelectionOffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GtkPrimarySelectionSource","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrDataControlManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrDataControlDeviceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrDataControlSourceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrDataControlOfferV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrDataControlManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrDataControlDeviceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrDataControlSourceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrDataControlOfferV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrExportDmabufManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancelReason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrExportDmabufFrameV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrExportDmabufManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancelReason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrExportDmabufFrameV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrForeignToplevelManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrForeignToplevelHandleV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrForeignToplevelManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrForeignToplevelHandleV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrGammaControlManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrGammaControlV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrGammaControlManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrGammaControlV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrInputInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrInputInhibitorV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrInputInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrInputInhibitorV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Layer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrLayerShellV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrLayerSurfaceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Layer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrLayerShellV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrLayerSurfaceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputHeadV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputModeV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputConfigurationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputConfigurationHeadV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputHeadV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputModeV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputConfigurationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputConfigurationHeadV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputPowerManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputPowerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputPowerManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrOutputPowerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrScreencopyManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrScreencopyFrameV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrScreencopyManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrScreencopyFrameV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrVirtualPointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrVirtualPointerManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrVirtualPointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZwlrVirtualPointerManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WpPresentation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WpPresentationFeedback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WpPresentation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WpPresentationFeedback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgWmBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgPositioner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgToplevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgWmBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgPositioner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgToplevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WpViewporter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WpViewport","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WpViewporter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WpViewport","synthetic":true,"types":[]}];
implementors["wayland_server"] = [{"text":"impl RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Display","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Global&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Resource&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Main&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlCallback","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlCompositor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlShmPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlShm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlDataOffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlDataSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlDataDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DndAction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlDataDeviceManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlShell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Resize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FullscreenMethod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlShellSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlSeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AxisSource","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlPointer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeymapFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlKeyboard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlTouch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Subpixel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlSubcompositor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WlSubsurface","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AnonymousObject","synthetic":true,"types":[]}];
implementors["wayland_sys"] = [{"text":"impl RefUnwindSafe for wl_message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_interface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_list","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_array","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_argument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_proxy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_display","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_event_queue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_client","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_display","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_event_loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_event_source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_global","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_resource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_shm_buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_listener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_signal","synthetic":true,"types":[]}];
implementors["wl_clip"] = [{"text":"impl RefUnwindSafe for Verbosity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["wl_clipboard_rs"] = [{"text":"impl RefUnwindSafe for ClipboardType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MimeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MimeSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Seat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServeRequests","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PreparedCopy","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SourceCreationError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClipboardType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MimeType&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Seat&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyDataError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PrimarySelectionCheckError","synthetic":true,"types":[]}];
implementors["wl_copy"] = [{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]}];
implementors["wl_paste"] = [{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()